name: CI & ECR Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  IMAGE_NAME: python-calculator
  AWS_REGION: eu-central-1

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Run unit tests
        run: |
          echo "Spouštění unit testů..."
          python -m unittest test_calculator.py -v

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          set -euo pipefail
          echo "Buildování Docker image..."
          docker build -t "${{ env.IMAGE_NAME }}:latest" .
          docker tag "${{ env.IMAGE_NAME }}:latest" "${{ env.IMAGE_NAME }}:${{ github.sha }}"

      - name: Test Docker container
        run: |
          set -euo pipefail
          echo "Testování Docker kontejneru..."
          docker run --rm "${{ env.IMAGE_NAME }}:latest"

      - name: List Docker images
        run: |
          echo "Seznam vytvořených images:"
          docker images "${{ env.IMAGE_NAME }}"

  deploy-to-ecr:
    needs: build-and-test
    runs-on: ubuntu-latest
    # Only deploy on direct pushes to main (not PRs)
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    concurrency:
      group: ecr-deploy-main
      cancel-in-progress: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -input=false

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -input=false -out=tfplan

      - name: Import existing ECR repo if present
        working-directory: ./terraform
        shell: bash
        run: |
          set -euo pipefail
          if aws ecr describe-repositories --repository-names python-calculator --region "${AWS_REGION}" >/dev/null 2>&1; then
            echo "Existing ECR repository found. Importing into state..."
            terraform import -no-color aws_ecr_repository.python_calculator python-calculator || true
          else
            echo "No existing ECR repository. Terraform will create it."
          fi

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -input=false -auto-approve tfplan

      - name: Get ECR repository URL
        id: ecr-url
        working-directory: ./terraform
        shell: bash
        run: |
          set -euo pipefail
          ECR_URL="$(terraform output -raw ecr_repository_url)"
          echo "ecr_url=${ECR_URL}" >> "$GITHUB_OUTPUT"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        env:
          ECR_URL: ${{ steps.ecr-url.outputs.ecr_url }}
        run: |
          set -euo pipefail
          echo "Building images for ECR..."
          docker build -t "${ECR_URL}:latest" .
          docker tag "${ECR_URL}:latest" "${ECR_URL}:${{ github.sha }}"

          echo "Pushing images to ECR..."
          docker push "${ECR_URL}:latest"
          docker push "${ECR_URL}:${{ github.sha }}"
          echo "Images pushed successfully!"
          echo "Repository URL: ${ECR_URL}"
